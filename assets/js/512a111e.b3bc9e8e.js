"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[505],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5246:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={sidebar_position:1},p="Development",s={unversionedId:"technical/development",id:"technical/development",isDocsHomePage:!1,title:"Development",description:"This file documents how to set up and run the code in this repository in your local development environment. For a production environment using Docker images, refer to the deployment documentation and the API Documentation.",source:"@site/docs/technical/development.md",sourceDirName:"technical",slug:"/technical/development",permalink:"/kindly/technical/development",editUrl:"https://github.com/unicef/kindly/edit/main/docs-website/docs/technical/development.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Build from scratch",permalink:"/kindly/ml-model/build-from-scratch"},next:{title:"Deployment",permalink:"/kindly/technical/deployment"}},u=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Configuration",id:"configuration",children:[{value:"Environment Variables",id:"environment-variables",children:[{value:"Authorization Tokens",id:"authorization-tokens",children:[],level:4},{value:"Allowed Origins",id:"allowed-origins",children:[],level:4},{value:"Windows Configuration of Environment Variables",id:"windows-configuration-of-environment-variables",children:[],level:4}],level:3}],level:2},{value:"Running Locally",id:"running-locally",children:[],level:2},{value:"Test Making Requests with Authorization Tokens",id:"test-making-requests-with-authorization-tokens",children:[],level:2},{value:"Test Making Requests with Allowed Origin",id:"test-making-requests-with-allowed-origin",children:[],level:2},{value:"Testing",id:"testing",children:[],level:2},{value:"Setting up linting",id:"setting-up-linting",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"development"},"Development"),(0,r.kt)("p",null,"This file documents how to set up and run the code in this repository in your local development environment. For a production environment using Docker images, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/kindly/technical/deployment"},"deployment")," documentation and the ",(0,r.kt)("a",{parentName:"p",href:"/kindly/api"},"API Documentation"),"."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"Please make sure that your development environment has the following prerequisites:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NodeJS 16"),(0,r.kt)("li",{parentName:"ul"},"Python 3")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Clone this repo:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"SSL"),"  :")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:unicef/kindly.git\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HTTPS"),":")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/unicef/kindly.git\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Using a command-line terminal of your choice, ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," into the api folder and create a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/venv.html"},"Python Virtual Environment"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd kindly/api\npython3 -m venv env\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Activate your virtual environment (you will run this step everytime you want to do work in your local development environment):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Linux/OSX"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source env/bin/activate\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Windows"),": Switch to cmd prompt as git bash won't run activate.bat file. Then run this command:   ")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"your-base-directory\\kindly\\api> .\\env\\Scripts\\activate.bat\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Upgrade your local version of ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install --upgrade pip\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the api dependencies:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -r requirements.txt\n")))),(0,r.kt)("p",null,"  \u26a0\ufe0f","\xa0","\xa0",(0,r.kt)("em",{parentName:"p"},"This configuration is known to work with Python 3.8.0. Other versions of Python may have different dependencies, which will require different versions of ",(0,r.kt)("inlineCode",{parentName:"em"},"requirements.txt"),", for example, if you have Python 3.6, try the following instead:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -r requirements.python-3.6.8.txt\n")),(0,r.kt)("p",null,"  ",(0,r.kt)("em",{parentName:"p"},"We will add more configuration files as we try other versions.")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Change into the client folder to install the client dependencies:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../client\nnpm i\n")))),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"The code for this repository defaults to the production environment configuration, where the API server is configured to only allow requests from a set of ",(0,r.kt)("strong",{parentName:"p"},"allowed origins")," or accept requests that include an ",(0,r.kt)("strong",{parentName:"p"},"Authorization Bearer token")," set in production. Both settings are configured through environment variables, which you can configure locally in your development environment."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"\u26a0\ufe0f","\xa0","\xa0","Note: If you haven't created a new ",(0,r.kt)("inlineCode",{parentName:"em"},".env")," as per the instructions below, you will recieve a ",(0,r.kt)("inlineCode",{parentName:"em"},"500")," error when trying to submit words to check on the site. If keys are unauthorized it will return a ",(0,r.kt)("inlineCode",{parentName:"em"},"403")," HTTP error.")),(0,r.kt)("h3",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"Use environment variables to set the configuration needed for the project. Environment variables can conveniently be configured through a ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file in the root folder of this repository. This repository provides a sample template ",(0,r.kt)("inlineCode",{parentName:"p"},".env.template")," file in the root folder that you need to copy into a new file. The code below will create a copy ",(0,r.kt)("inlineCode",{parentName:"p"},".env.template")," into ",(0,r.kt)("inlineCode",{parentName:"p"},".env"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cp .env.template .env\n")),(0,r.kt)("p",null,"You can further edit your ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file you to update any urls, or authentication tokens if needed."),(0,r.kt)("h4",{id:"authorization-tokens"},"Authorization Tokens"),(0,r.kt)("p",null,"Authorization tokens are configured through the environment variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"TOKEN_KEYS"),", and is a JSON object of token keys with a value of who owns that key as illustrated below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'TOKEN_KEYS = \'{"aasdf1234":"third_party_1","a]gghrydf1234":"third_party_1","klasjdflkja":"third_party_3"}\'\n')),(0,r.kt)("h4",{id:"allowed-origins"},"Allowed Origins"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ALLOWED_ORIGINS")," is an array of the domains where a request can originate from that will be accepted by this API, such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'ALLOWED_ORIGINS = ["https://unicef.org","https://kindly-client.azurewebsites.net","https://kindly-api.azurewebsites.net", "http://localhost:3000"]\n')),(0,r.kt)("p",null,"As you will notice from above, the provided ",(0,r.kt)("inlineCode",{parentName:"p"},".env.template")," already lists ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),", which is where the client server runs."),(0,r.kt)("h4",{id:"windows-configuration-of-environment-variables"},"Windows Configuration of Environment Variables"),(0,r.kt)("p",null,"In Windows, instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," files, one can configure environmet variables in ",(0,r.kt)("inlineCode",{parentName:"p"},"cmd.exe")," with this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'setx TOKEN_KEYS {\\"aasdf1234\\":\\"third_party_1\\",\\"a]gghrydf1234\\":\\"third_party_1\\\\"klasjdflkja\\":\\"third_party_3\\"}\n')),(0,r.kt)("p",null,"The above command will create a new environment variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"TOKEN_KEYS")," and it will hold the JSON object of token keys with a value of who owns that key. "),(0,r.kt)("h2",{id:"running-locally"},"Running Locally"),(0,r.kt)("p",null,"From the ",(0,r.kt)("inlineCode",{parentName:"p"},"api/")," folder:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"First activate your Python Virtual Environment that you created in the ",(0,r.kt)("a",{parentName:"p",href:"#Installation"},"Installation")," section above:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Linux/OSX"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source env/bin/activate\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Windows"),": Switch to cmd prompt as git bash won't run ",(0,r.kt)("inlineCode",{parentName:"p"},"activate.bat")," file. Then run this command: "))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"your-base-directory\\kindly\\api> .\\env\\Scripts\\activate.bat\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Download a local copy of the ML model (you only have to run this once):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python get_model.py\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the python server using the following command:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python api.py\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On a different terminal window/tab, ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," into the client folder and and run the following command:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")))),(0,r.kt)("h2",{id:"test-making-requests-with-authorization-tokens"},"Test Making Requests with Authorization Tokens"),(0,r.kt)("p",null,"Test requests using the following 2 methods. Python server must be running and you must have an ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file with the ",(0,r.kt)("inlineCode",{parentName:"p"},"TOKEN_KEYS"),"."),(0,r.kt)("p",null,"Your client HTTP requests to the API must include an ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header with a ",(0,r.kt)("inlineCode",{parentName:"p"},"'Bearer <token>'")," value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"Authorization": "Bearer YOUR-TOKEN-GOES-HERE\'"\n')),(0,r.kt)("p",null,"Unauthorized keys in the request will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," HTTP error."),(0,r.kt)("p",null,"Below is an example using curl:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  -X POST \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer aasdf1234" \\\n  http://localhost:8080/detect \\\n  -d \'{"text":"I love you so much"}\'\n')),(0,r.kt)("p",null,"And the same example using Axios in NodeJS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var axios = require('axios');\nvar data = JSON.stringify({\n  \"text\": \"I love you so much\"\n});\n\nvar config = {\n  method: 'post',\n  url: 'localhost:8080/detect',\n  headers: { \n    'Authorization': 'Bearer aasdf1234', \n    'Content-Type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n")),(0,r.kt)("h2",{id:"test-making-requests-with-allowed-origin"},"Test Making Requests with Allowed Origin"),(0,r.kt)("p",null,"Below is an example using curl, where you can set your origin in the header of the request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl \\\n  -X POST \\\n  -H "Content-Type: application/json" \\\n  -H "Origin: http://localhost:3000" \\\n  http://localhost:8080/detect \\\n  -d \'{"text":"I love you so much"}\'\n')),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Unit test for endpoints have been set up using pytest."),(0,r.kt)("p",null,"To run tests from within the ",(0,r.kt)("inlineCode",{parentName:"p"},"api/")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pytest\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"'/'")," endpoint has 2 associated tests:\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_api_glossary()")," for success response from ",(0,r.kt)("inlineCode",{parentName:"p"},"'/'")," endpoint\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_api_glossary_403()")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," response if not authorised"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"'/test-ui'")," has 1 associated test:\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_welcome()")," for success response from ",(0,r.kt)("inlineCode",{parentName:"p"},"'/test-ui'")," endpoint"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"'/detect'")," endpoint has 4 associated tests:\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_detect()")," for success response from ",(0,r.kt)("inlineCode",{parentName:"p"},"/detect")," endpoint\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_detect_403()")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"403")," response if not authorised\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_detect_offensive()")," to test for correct response from an offensive term\n",(0,r.kt)("inlineCode",{parentName:"p"},"test_detect_not_offensive()")," to test for correct response from a non-offensive term"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"'/train'")," endpoint, tests pending"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"test_404()")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"404")," error with invalid endpoint"),(0,r.kt)("h2",{id:"setting-up-linting"},"Setting up linting"),(0,r.kt)("p",null,"Pylint has been set up for all Python files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api")," folder. It enforces PEP8 coding standard, trying to follow it as close as possible. The pylint test can be run with the following command to check for errors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pylint [file.py]\n")),(0,r.kt)("p",null,"Pylint gives information on errors and their respective lines in the code to mak debugging easier. A pre-commit hook has been set up to ensure that commits cannot be made if there are linting errors."))}d.isMDXComponent=!0}}]);